//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Permutation.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public partial class PermutationParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, INT=6, WS=7;
	public const int
		RULE_file = 0, RULE_init = 1, RULE_cycle = 2, RULE_value = 3;
	public static readonly string[] ruleNames = {
		"file", "init", "cycle", "value"
	};

	private static readonly string[] _LiteralNames = {
		null, "'+'", "'^'", "'('", "')'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, "INT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Permutation.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public PermutationParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class FileContext : ParserRuleContext {
		public InitContext[] init() {
			return GetRuleContexts<InitContext>();
		}
		public InitContext init(int i) {
			return GetRuleContext<InitContext>(i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPermutationVisitor<TResult> typedVisitor = visitor as IPermutationVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 8; init();
				}
				}
				State = 11;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==T__0 || _la==T__2 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitContext : ParserRuleContext {
		public InitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_init; } }
	 
		public InitContext() { }
		public virtual void CopyFrom(InitContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ParensContext : InitContext {
		public InitContext init() {
			return GetRuleContext<InitContext>(0);
		}
		public ParensContext(InitContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPermutationVisitor<TResult> typedVisitor = visitor as IPermutationVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParens(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExponentContext : InitContext {
		public CycleContext cycle() {
			return GetRuleContext<CycleContext>(0);
		}
		public ITerminalNode INT() { return GetToken(PermutationParser.INT, 0); }
		public ExponentContext(InitContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPermutationVisitor<TResult> typedVisitor = visitor as IPermutationVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExponent(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InitCycleContext : InitContext {
		public CycleContext[] cycle() {
			return GetRuleContexts<CycleContext>();
		}
		public CycleContext cycle(int i) {
			return GetRuleContext<CycleContext>(i);
		}
		public InitCycleContext(InitContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPermutationVisitor<TResult> typedVisitor = visitor as IPermutationVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitCycle(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComposeContext : InitContext {
		public ComposeContext(InitContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPermutationVisitor<TResult> typedVisitor = visitor as IPermutationVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompose(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitContext init() {
		InitContext _localctx = new InitContext(Context, State);
		EnterRule(_localctx, 2, RULE_init);
		try {
			int _alt;
			State = 27;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				_localctx = new ComposeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 13; Match(T__0);
				}
				break;
			case 2:
				_localctx = new InitCycleContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 15;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 14; cycle();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 17;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			case 3:
				_localctx = new ExponentContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 19; cycle();
				State = 20; Match(T__1);
				State = 21; Match(INT);
				}
				break;
			case 4:
				_localctx = new ParensContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 23; Match(T__2);
				State = 24; init();
				State = 25; Match(T__3);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CycleContext : ParserRuleContext {
		public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		public CycleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cycle; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPermutationVisitor<TResult> typedVisitor = visitor as IPermutationVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCycle(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CycleContext cycle() {
		CycleContext _localctx = new CycleContext(Context, State);
		EnterRule(_localctx, 4, RULE_cycle);
		int _la;
		try {
			State = 42;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 29; Match(T__2);
				State = 30; value();
				State = 35;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==T__4) {
					{
					{
					State = 31; Match(T__4);
					State = 32; value();
					}
					}
					State = 37;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 38; Match(T__3);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 40; Match(T__2);
				State = 41; Match(T__3);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(PermutationParser.INT, 0); }
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPermutationVisitor<TResult> typedVisitor = visitor as IPermutationVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 6, RULE_value);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 44; Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\t\x31");
		sb.Append("\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x3\x2\x6\x2\f\n");
		sb.Append("\x2\r\x2\xE\x2\r\x3\x3\x3\x3\x6\x3\x12\n\x3\r\x3\xE\x3\x13\x3");
		sb.Append("\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3\x1E\n\x3");
		sb.Append("\x3\x4\x3\x4\x3\x4\x3\x4\a\x4$\n\x4\f\x4\xE\x4\'\v\x4\x3\x4");
		sb.Append("\x3\x4\x3\x4\x3\x4\x5\x4-\n\x4\x3\x5\x3\x5\x3\x5\x2\x2\x6\x2");
		sb.Append("\x4\x6\b\x2\x2\x33\x2\v\x3\x2\x2\x2\x4\x1D\x3\x2\x2\x2\x6,\x3");
		sb.Append("\x2\x2\x2\b.\x3\x2\x2\x2\n\f\x5\x4\x3\x2\v\n\x3\x2\x2\x2\f\r");
		sb.Append("\x3\x2\x2\x2\r\v\x3\x2\x2\x2\r\xE\x3\x2\x2\x2\xE\x3\x3\x2\x2");
		sb.Append("\x2\xF\x1E\a\x3\x2\x2\x10\x12\x5\x6\x4\x2\x11\x10\x3\x2\x2\x2");
		sb.Append("\x12\x13\x3\x2\x2\x2\x13\x11\x3\x2\x2\x2\x13\x14\x3\x2\x2\x2");
		sb.Append("\x14\x1E\x3\x2\x2\x2\x15\x16\x5\x6\x4\x2\x16\x17\a\x4\x2\x2");
		sb.Append("\x17\x18\a\b\x2\x2\x18\x1E\x3\x2\x2\x2\x19\x1A\a\x5\x2\x2\x1A");
		sb.Append("\x1B\x5\x4\x3\x2\x1B\x1C\a\x6\x2\x2\x1C\x1E\x3\x2\x2\x2\x1D");
		sb.Append("\xF\x3\x2\x2\x2\x1D\x11\x3\x2\x2\x2\x1D\x15\x3\x2\x2\x2\x1D");
		sb.Append("\x19\x3\x2\x2\x2\x1E\x5\x3\x2\x2\x2\x1F \a\x5\x2\x2 %\x5\b\x5");
		sb.Append("\x2!\"\a\a\x2\x2\"$\x5\b\x5\x2#!\x3\x2\x2\x2$\'\x3\x2\x2\x2");
		sb.Append("%#\x3\x2\x2\x2%&\x3\x2\x2\x2&(\x3\x2\x2\x2\'%\x3\x2\x2\x2()");
		sb.Append("\a\x6\x2\x2)-\x3\x2\x2\x2*+\a\x5\x2\x2+-\a\x6\x2\x2,\x1F\x3");
		sb.Append("\x2\x2\x2,*\x3\x2\x2\x2-\a\x3\x2\x2\x2./\a\b\x2\x2/\t\x3\x2");
		sb.Append("\x2\x2\a\r\x13\x1D%,");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
