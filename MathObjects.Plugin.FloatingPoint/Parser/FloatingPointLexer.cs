//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from FloatingPoint.g4 by ANTLR 4.5.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.2")]
[System.CLSCompliant(false)]
public partial class FloatingPointLexer : Lexer {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, INT=8, FLOAT=9, 
		ID=10, DIGIT=11, LETTER=12, MUL=13, DIV=14, ADD=15, SUB=16, START=17, 
		END=18, WS=19;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "INT", "FLOAT", 
		"ID", "DIGIT", "LETTER", "MUL", "DIV", "ADD", "SUB", "START", "END", "WS"
	};


	public FloatingPointLexer(ICharStream input)
		: base(input)
	{
		Interpreter = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "';'", "'<-'", "'='", "'('", "')'", "'^'", "','", null, null, null, 
		null, null, "'*'", "'/'", "'+'", "'-'", "'{'", "'}'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, "INT", "FLOAT", "ID", 
		"DIGIT", "LETTER", "MUL", "DIV", "ADD", "SUB", "START", "END", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "FloatingPoint.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x2\x15");
		sb.Append("s\b\x1\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6");
		sb.Append("\x4\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r");
		sb.Append("\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t\x10\x4\x11\t\x11\x4\x12");
		sb.Append("\t\x12\x4\x13\t\x13\x4\x14\t\x14\x3\x2\x3\x2\x3\x3\x3\x3\x3");
		sb.Append("\x3\x3\x4\x3\x4\x3\x5\x3\x5\x3\x6\x3\x6\x3\a\x3\a\x3\b\x3\b");
		sb.Append("\x3\t\x6\t:\n\t\r\t\xE\t;\x3\n\x6\n?\n\n\r\n\xE\n@\x3\n\x3\n");
		sb.Append("\a\n\x45\n\n\f\n\xE\nH\v\n\x3\n\x3\n\x6\nL\n\n\r\n\xE\nM\x5");
		sb.Append("\nP\n\n\x3\v\x6\vS\n\v\r\v\xE\vT\x3\v\a\vX\n\v\f\v\xE\v[\v\v");
		sb.Append("\x3\f\x3\f\x3\r\x3\r\x3\xE\x3\xE\x3\xF\x3\xF\x3\x10\x3\x10\x3");
		sb.Append("\x11\x3\x11\x3\x12\x3\x12\x3\x13\x3\x13\x3\x14\x6\x14n\n\x14");
		sb.Append("\r\x14\xE\x14o\x3\x14\x3\x14\x2\x2\x15\x3\x3\x5\x4\a\x5\t\x6");
		sb.Append("\v\a\r\b\xF\t\x11\n\x13\v\x15\f\x17\r\x19\xE\x1B\xF\x1D\x10");
		sb.Append("\x1F\x11!\x12#\x13%\x14\'\x15\x3\x2\x5\x3\x2\x32;\x4\x2\x43");
		sb.Append("\\\x63|\x5\x2\v\f\xF\xF\"\"z\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2");
		sb.Append("\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r");
		sb.Append("\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3");
		sb.Append("\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2");
		sb.Append("\x2\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2\x2\x1F\x3\x2\x2");
		sb.Append("\x2\x2!\x3\x2\x2\x2\x2#\x3\x2\x2\x2\x2%\x3\x2\x2\x2\x2\'\x3");
		sb.Append("\x2\x2\x2\x3)\x3\x2\x2\x2\x5+\x3\x2\x2\x2\a.\x3\x2\x2\x2\t\x30");
		sb.Append("\x3\x2\x2\x2\v\x32\x3\x2\x2\x2\r\x34\x3\x2\x2\x2\xF\x36\x3\x2");
		sb.Append("\x2\x2\x11\x39\x3\x2\x2\x2\x13O\x3\x2\x2\x2\x15R\x3\x2\x2\x2");
		sb.Append("\x17\\\x3\x2\x2\x2\x19^\x3\x2\x2\x2\x1B`\x3\x2\x2\x2\x1D\x62");
		sb.Append("\x3\x2\x2\x2\x1F\x64\x3\x2\x2\x2!\x66\x3\x2\x2\x2#h\x3\x2\x2");
		sb.Append("\x2%j\x3\x2\x2\x2\'m\x3\x2\x2\x2)*\a=\x2\x2*\x4\x3\x2\x2\x2");
		sb.Append("+,\a>\x2\x2,-\a/\x2\x2-\x6\x3\x2\x2\x2./\a?\x2\x2/\b\x3\x2\x2");
		sb.Append("\x2\x30\x31\a*\x2\x2\x31\n\x3\x2\x2\x2\x32\x33\a+\x2\x2\x33");
		sb.Append("\f\x3\x2\x2\x2\x34\x35\a`\x2\x2\x35\xE\x3\x2\x2\x2\x36\x37\a");
		sb.Append(".\x2\x2\x37\x10\x3\x2\x2\x2\x38:\t\x2\x2\x2\x39\x38\x3\x2\x2");
		sb.Append("\x2:;\x3\x2\x2\x2;\x39\x3\x2\x2\x2;<\x3\x2\x2\x2<\x12\x3\x2");
		sb.Append("\x2\x2=?\x5\x17\f\x2>=\x3\x2\x2\x2?@\x3\x2\x2\x2@>\x3\x2\x2");
		sb.Append("\x2@\x41\x3\x2\x2\x2\x41\x42\x3\x2\x2\x2\x42\x46\a\x30\x2\x2");
		sb.Append("\x43\x45\x5\x17\f\x2\x44\x43\x3\x2\x2\x2\x45H\x3\x2\x2\x2\x46");
		sb.Append("\x44\x3\x2\x2\x2\x46G\x3\x2\x2\x2GP\x3\x2\x2\x2H\x46\x3\x2\x2");
		sb.Append("\x2IK\a\x30\x2\x2JL\x5\x17\f\x2KJ\x3\x2\x2\x2LM\x3\x2\x2\x2");
		sb.Append("MK\x3\x2\x2\x2MN\x3\x2\x2\x2NP\x3\x2\x2\x2O>\x3\x2\x2\x2OI\x3");
		sb.Append("\x2\x2\x2P\x14\x3\x2\x2\x2QS\x5\x19\r\x2RQ\x3\x2\x2\x2ST\x3");
		sb.Append("\x2\x2\x2TR\x3\x2\x2\x2TU\x3\x2\x2\x2UY\x3\x2\x2\x2VX\x5\x17");
		sb.Append("\f\x2WV\x3\x2\x2\x2X[\x3\x2\x2\x2YW\x3\x2\x2\x2YZ\x3\x2\x2\x2");
		sb.Append("Z\x16\x3\x2\x2\x2[Y\x3\x2\x2\x2\\]\t\x2\x2\x2]\x18\x3\x2\x2");
		sb.Append("\x2^_\t\x3\x2\x2_\x1A\x3\x2\x2\x2`\x61\a,\x2\x2\x61\x1C\x3\x2");
		sb.Append("\x2\x2\x62\x63\a\x31\x2\x2\x63\x1E\x3\x2\x2\x2\x64\x65\a-\x2");
		sb.Append("\x2\x65 \x3\x2\x2\x2\x66g\a/\x2\x2g\"\x3\x2\x2\x2hi\a}\x2\x2");
		sb.Append("i$\x3\x2\x2\x2jk\a\x7F\x2\x2k&\x3\x2\x2\x2ln\t\x4\x2\x2ml\x3");
		sb.Append("\x2\x2\x2no\x3\x2\x2\x2om\x3\x2\x2\x2op\x3\x2\x2\x2pq\x3\x2");
		sb.Append("\x2\x2qr\b\x14\x2\x2r(\x3\x2\x2\x2\v\x2;@\x46MOTYo\x3\b\x2\x2");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
