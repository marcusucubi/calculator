//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from FloatingPoint.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
public partial class FloatingPointLexer : Lexer {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, INT=8, FLOAT=9, 
		ID=10, STACK_PARAM=11, DIGIT=12, LETTER=13, MUL=14, DIV=15, ADD=16, SUB=17, 
		START=18, END=19, WS=20;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "INT", "FLOAT", 
		"ID", "STACK_PARAM", "DIGIT", "LETTER", "MUL", "DIV", "ADD", "SUB", "START", 
		"END", "WS"
	};


	public FloatingPointLexer(ICharStream input)
		: base(input)
	{
		Interpreter = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "';'", "'<-'", "'='", "'('", "')'", "'^'", "','", null, null, null, 
		null, null, null, "'*'", "'/'", "'+'", "'-'", "'{'", "'}'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, "INT", "FLOAT", "ID", 
		"STACK_PARAM", "DIGIT", "LETTER", "MUL", "DIV", "ADD", "SUB", "START", 
		"END", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "FloatingPoint.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x2\x16");
		sb.Append("x\b\x1\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6");
		sb.Append("\x4\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r");
		sb.Append("\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t\x10\x4\x11\t\x11\x4\x12");
		sb.Append("\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15\x3\x2\x3\x2\x3");
		sb.Append("\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x5\x3\x5\x3\x6\x3\x6\x3\a\x3");
		sb.Append("\a\x3\b\x3\b\x3\t\x6\t<\n\t\r\t\xE\t=\x3\n\x6\n\x41\n\n\r\n");
		sb.Append("\xE\n\x42\x3\n\x3\n\a\nG\n\n\f\n\xE\nJ\v\n\x3\n\x3\n\x6\nN\n");
		sb.Append("\n\r\n\xE\nO\x5\nR\n\n\x3\v\x6\vU\n\v\r\v\xE\vV\x3\v\a\vZ\n");
		sb.Append("\v\f\v\xE\v]\v\v\x3\f\x3\f\x3\f\x3\r\x3\r\x3\xE\x3\xE\x3\xF");
		sb.Append("\x3\xF\x3\x10\x3\x10\x3\x11\x3\x11\x3\x12\x3\x12\x3\x13\x3\x13");
		sb.Append("\x3\x14\x3\x14\x3\x15\x6\x15s\n\x15\r\x15\xE\x15t\x3\x15\x3");
		sb.Append("\x15\x2\x2\x16\x3\x3\x5\x4\a\x5\t\x6\v\a\r\b\xF\t\x11\n\x13");
		sb.Append("\v\x15\f\x17\r\x19\xE\x1B\xF\x1D\x10\x1F\x11!\x12#\x13%\x14");
		sb.Append("\'\x15)\x16\x3\x2\x5\x3\x2\x32;\x6\x2\x30\x30\x43\\\x61\x61");
		sb.Append("\x63|\x5\x2\v\f\xF\xF\"\"\x7F\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2");
		sb.Append("\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2");
		sb.Append("\r\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3");
		sb.Append("\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2");
		sb.Append("\x2\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2\x2\x1F\x3\x2\x2");
		sb.Append("\x2\x2!\x3\x2\x2\x2\x2#\x3\x2\x2\x2\x2%\x3\x2\x2\x2\x2\'\x3");
		sb.Append("\x2\x2\x2\x2)\x3\x2\x2\x2\x3+\x3\x2\x2\x2\x5-\x3\x2\x2\x2\a");
		sb.Append("\x30\x3\x2\x2\x2\t\x32\x3\x2\x2\x2\v\x34\x3\x2\x2\x2\r\x36\x3");
		sb.Append("\x2\x2\x2\xF\x38\x3\x2\x2\x2\x11;\x3\x2\x2\x2\x13Q\x3\x2\x2");
		sb.Append("\x2\x15T\x3\x2\x2\x2\x17^\x3\x2\x2\x2\x19\x61\x3\x2\x2\x2\x1B");
		sb.Append("\x63\x3\x2\x2\x2\x1D\x65\x3\x2\x2\x2\x1Fg\x3\x2\x2\x2!i\x3\x2");
		sb.Append("\x2\x2#k\x3\x2\x2\x2%m\x3\x2\x2\x2\'o\x3\x2\x2\x2)r\x3\x2\x2");
		sb.Append("\x2+,\a=\x2\x2,\x4\x3\x2\x2\x2-.\a>\x2\x2./\a/\x2\x2/\x6\x3");
		sb.Append("\x2\x2\x2\x30\x31\a?\x2\x2\x31\b\x3\x2\x2\x2\x32\x33\a*\x2\x2");
		sb.Append("\x33\n\x3\x2\x2\x2\x34\x35\a+\x2\x2\x35\f\x3\x2\x2\x2\x36\x37");
		sb.Append("\a`\x2\x2\x37\xE\x3\x2\x2\x2\x38\x39\a.\x2\x2\x39\x10\x3\x2");
		sb.Append("\x2\x2:<\t\x2\x2\x2;:\x3\x2\x2\x2<=\x3\x2\x2\x2=;\x3\x2\x2\x2");
		sb.Append("=>\x3\x2\x2\x2>\x12\x3\x2\x2\x2?\x41\x5\x19\r\x2@?\x3\x2\x2");
		sb.Append("\x2\x41\x42\x3\x2\x2\x2\x42@\x3\x2\x2\x2\x42\x43\x3\x2\x2\x2");
		sb.Append("\x43\x44\x3\x2\x2\x2\x44H\a\x30\x2\x2\x45G\x5\x19\r\x2\x46\x45");
		sb.Append("\x3\x2\x2\x2GJ\x3\x2\x2\x2H\x46\x3\x2\x2\x2HI\x3\x2\x2\x2IR");
		sb.Append("\x3\x2\x2\x2JH\x3\x2\x2\x2KM\a\x30\x2\x2LN\x5\x19\r\x2ML\x3");
		sb.Append("\x2\x2\x2NO\x3\x2\x2\x2OM\x3\x2\x2\x2OP\x3\x2\x2\x2PR\x3\x2");
		sb.Append("\x2\x2Q@\x3\x2\x2\x2QK\x3\x2\x2\x2R\x14\x3\x2\x2\x2SU\x5\x1B");
		sb.Append("\xE\x2TS\x3\x2\x2\x2UV\x3\x2\x2\x2VT\x3\x2\x2\x2VW\x3\x2\x2");
		sb.Append("\x2W[\x3\x2\x2\x2XZ\x5\x19\r\x2YX\x3\x2\x2\x2Z]\x3\x2\x2\x2");
		sb.Append("[Y\x3\x2\x2\x2[\\\x3\x2\x2\x2\\\x16\x3\x2\x2\x2][\x3\x2\x2\x2");
		sb.Append("^_\a\'\x2\x2_`\x5\x11\t\x2`\x18\x3\x2\x2\x2\x61\x62\t\x2\x2");
		sb.Append("\x2\x62\x1A\x3\x2\x2\x2\x63\x64\t\x3\x2\x2\x64\x1C\x3\x2\x2");
		sb.Append("\x2\x65\x66\a,\x2\x2\x66\x1E\x3\x2\x2\x2gh\a\x31\x2\x2h \x3");
		sb.Append("\x2\x2\x2ij\a-\x2\x2j\"\x3\x2\x2\x2kl\a/\x2\x2l$\x3\x2\x2\x2");
		sb.Append("mn\a}\x2\x2n&\x3\x2\x2\x2op\a\x7F\x2\x2p(\x3\x2\x2\x2qs\t\x4");
		sb.Append("\x2\x2rq\x3\x2\x2\x2st\x3\x2\x2\x2tr\x3\x2\x2\x2tu\x3\x2\x2");
		sb.Append("\x2uv\x3\x2\x2\x2vw\b\x15\x2\x2w*\x3\x2\x2\x2\v\x2=\x42HOQV");
		sb.Append("[t\x3\b\x2\x2");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
